@using RPG.Controllers.Common
@using RPG.Controllers.Extenstions
@using RPG.Models.RulebookModal
@model RPG.Models.ControllerDto.Creator.SpecialAbilityDataDto

@{
    ViewBag.Title = "SpecialAbility";
    Layout = "~/Views/Shared/CreatorLayoutPage.cshtml";
}

@using (Html.BeginForm("Save", "SpecialAbility", FormMethod.Post))
{
    <div class="row">
        <div class="col-xs-12">
            <h2>Add Special Ability</h2>
            <div class="row">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#baseInfo">Base info</a></li>
                    <li><a data-toggle="tab" href="#limits">Usage limits</a></li>
                    <li><a data-toggle="tab" href="#usageDuration">Usage duration</a></li>
                    <li><a data-toggle="tab" href="#chargesAbility">Charges</a></li>
                    <li><a data-toggle="tab" href="#tradeOff">Trade off</a></li>
                    <li><a data-toggle="tab" href="#condition">Apply condition</a></li>
                </ul>
                <div class="tab-content">
                    <div id="baseInfo" class="tab-pane fade in active">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    @Html.HiddenFor(m => m.SelectedItem.ID)
                                    @Html.LabelForRequired(m => m.SelectedItem.Name) 
                                    @Html.TextBoxFor(m => m.SelectedItem.Name,HtmlConfiguration.TextBoxFor_Text)
                                    @Html.ValidationMessageFor(m => m.SelectedItem.Name)
                                </div>
                                <div class="row">
                                    <label>Description:</label>
                                    @Html.TextAreaFor(m => m.SelectedItem.Description,HtmlConfiguration.TextBoxFor_Text)
                                </div>
                                <div class="row">
                                    <div class="checkbox">
                                        <label class="btn btn-default width100">
                                            @Html.CheckBoxFor(m => m.SelectedItem.CanTakeAsFeat)
                                            Can take as feat?
                                        </label>
                                    </div>
                                </div>
                                <div class="row">
                                    <label>Bonuses:</label>
                                    @Html.ListBoxFor(m => m.Bonuses, new SelectList(Model.AllBonuses, "ID", "Name", Model.Bonuses), HtmlConfiguration.ListBoxFor_SelectMultiple)
                                </div>
                                <div class="row">
                                    <div class="checkbox">
                                        <label class="btn btn-default width100">
                                            @Html.CheckBoxFor(m => m.SelectedItem.CanTakeAsEnchantment)
                                            Can take as Enchantment
                                        </label>
                                    </div>
                                </div>
                                <div class="row">
                                    <label>Required ability to be active</label>
                                    @Html.DropDownListFor(a => a.RequiredAbility, new SelectList(Model.Data, "ID", "Name"),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                </div>
                                <div class="row">
                                    <label>Required ability charges required (only if more then 1)</label>
                                    @Html.TextBoxFor(m => m.SelectedItem.RequiredNumberOfCharges, HtmlConfiguration.TextBoxFor_Number)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="limits" class="tab-pane fade in">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    <label>Explanation:</label>
                                    Denotes how many times this ability can be used. The Reset Unit denotes of often the charges are resets.
                                </div>
                                <div class="row">
                                    <label>Action to use:</label>
                                    @Html.DropDownListFor(a => a.SelectedItem.Limit.Amount.ActionRequired, Tools.RoundActionAsSelectList(), HtmlConfiguration.DropDownListFor)
                                </div>
                                <div class="row">
                                    <div class="checkbox">
                                        <label class="btn btn-default width100">
                                            @Html.CheckBoxFor(m => m.SelectedItem.Limit.Amount.ProvokesAttackOfOppertunity)
                                            Provokes Attack Of Oppertunity?
                                        </label>
                                    </div>
                                </div>
                                <div class="row">
                                    <label>Fixed bonus</label>
                                    @Html.TextBoxFor(m => m.SelectedItem.Limit.Amount.FixedAmount, HtmlConfiguration.TextBoxFor_Number)
                                </div>
                                <div class="row">
                                    <label>Ability modifier</label>
                                    @Html.DropDownListFor(a => a.LimitAmountAbility, new SelectList(Model.AbilityOptions, "ID", "Name"),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                </div>
                                <div class="row">
                                    <label>By class level</label>
                                    <div class="col-xs-12">
                                        <div class="row">
                                            @Html.DropDownListFor(a => a.LimitAmountClass, new SelectList(Model.Classes, "ID", "Name"),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                        </div>
                                        <div class="row">
                                            @Html.ListBoxFor(m => m.LimitAmountClassAtLevel, new SelectList(Model.ClassLevels, "Key", "Value", Model != null && Model.SelectedItem != null && Model.SelectedItem.Limit != null && Model.SelectedItem.Limit.Amount != null && Model.SelectedItem.Limit.Amount.ClassProgression != null ? Model.SelectedItem.Limit.Amount.ClassProgression.Select(x => x.AtLevel).OrderBy(x => x).ToArray() : null), HtmlConfiguration.ListBoxFor_SelectMultiple)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label>Reset unit:</label>
                                    @Html.DropDownListFor(a => a.SelectedItem.Limit.Amount.ResetUseTimeLimtUnit, Tools.TimeLimitUnitAsSelectList(), HtmlConfiguration.DropDownListFor)
                                </div>
                                <div class="row">
                                    <label>Limit auto bonus (Only used for 'auto on hit' and 'auto on dmg')</label>
                                    @Html.TextBoxFor(m => m.SelectedItem.Limit.Amount.LimitAutoCharges, HtmlConfiguration.TextBoxFor_Number)
                                </div>
                                <div class="row">
                                    <label>Limit auto bonus to variable (Only used for 'auto on hit' and 'auto on dmg')</label>
                                    @Html.DropDownListFor(a => a.SelectedItem.Limit.Amount.VariableLimitAutoCharges, Tools.AutoApplyLimitAsSelectList(),"--Non--", HtmlConfiguration.DropDownListFor)
                                </div>
                            </div>
						</div>
					</div>
                    <div id="usageDuration" class="tab-pane fade in">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    <label>Explanation:</label>
                                    Denotes long the ability last while activted.
                                </div>
                                <div class="row">
                                    <label>Duration unit:</label>
                                    @Html.DropDownListFor(a => a.SelectedItem.Limit.Duration.Unit, Tools.DurationUnitAsSelectList(), HtmlConfiguration.DropDownListFor)
                                </div>
                                <div class="row">
                                    <label>Fixed bonus</label>
                                    @Html.TextBoxFor(m => m.SelectedItem.Limit.Duration.Amount, HtmlConfiguration.TextBoxFor_Number)
                                </div>
                                <div class="row">
                                    <label>Ability modifier</label>
                                    @Html.DropDownListFor(a => a.DurationAmountAbility, new SelectList(Model.AbilityOptions, "ID", "Name"),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                </div>
							</div>
						</div>
					</div>
                    <div id="chargesAbility" class="tab-pane fade in">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    <label>Explanation:</label>
                                    Use if the special ability should be used in charges. The bonus defined below will override the fixed value on the bonuses selected in Base Info.
                                </div>
                                @if (Model.SelectedItem == null || Model.SelectedItem.ID == Guid.Empty)
                                {
                                    <div class="row">
                                        <label>Save the ability to add charges</label>
                                    </div>
                                }
                                else
                                {
                                    <div class="row">
                                        <label>Bonus from chages. Input die roll ex 1d4+1</label>
                                    </div>
                                    
                                    for (int i = 0; i < Model.BonusFromCharges.Length; i++)
                                    {
                                        <div class="row">
                                            <div class="col-xs-4">
                                                <label>@Html.Raw(i+1) Charge(s)</label>
                                            </div>
                                            <div class="col-xs-8">
                                                <label>@Html.TextBoxFor(m => m.BonusFromCharges[i],HtmlConfiguration.TextBoxFor_Text)</label>
                                            </div>
                                        </div>
                                    }
                                }
                                
                            </div>
                        </div>
                    </div>
                    <div id="tradeOff" class="tab-pane fade in">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    <label>Explanation:</label>
                                    Use if the special ability should be a trade off between two properties. The bonus defined below will override the fixed value on the bonuses selected in Base Info.
                                </div>
                                @if (Model.SelectedItem == null || Model.SelectedItem.ID == Guid.Empty)
                                {
                                    <div class="row">
                                        <label>Save the ability to add charges</label>
                                    </div>
                                }
                                else
                                {
                                    <div class="row">
                                        <label>Trade off</label>
                                        <div class="row">
                                            <div class="col-xs-12 col-md-12">
                                                <div class="row">
                                                    <div class="col-xs-3 col-md-3">
                                                        <div class="row">
                                                            <label>Trade</label>
                                                            @Html.DropDownListFor(m => m.TradeWithId, new SelectList(Model.AllBonuses, "ID", "Name", Model.Bonuses),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-3 col-md-3">
                                                        <div class="row">
                                                            <label>Max trade (-1 = no limit)</label>
                                                            @Html.TextBoxFor(m => m.SelectedItem.Limit.Amount.TradeMaxTrade, HtmlConfiguration.TextBoxFor_Number)
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-3 col-md-3">
                                                        <div class="row">
                                                            <label>Multiplyer</label>
                                                            @Html.TextBoxFor(m => m.SelectedItem.Limit.Amount.TradeMultiplyer, HtmlConfiguration.TextBoxFor_Number)
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-3 col-md-3">
                                                        <div class="row">
                                                            <label>Multiplyer THW</label>
                                                            <div class="checkbox">
                                                                <label class="btn btn-default width100">
                                                                    @Html.CheckBoxFor(m => m.SelectedItem.Limit.Amount.TradeDoubleIfThw)
                                                                    Trade double for Two Handed Weapons?
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                            </div>
                        </div>
                    </div>
                    <div id="condition" class="tab-pane fade in">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <div class="row">
                                    <label>Explanation:</label>
                                    Use if the conditions should be applied to the character.
                                </div>
                                
                                <div class="row">
                                    <label>On activate</label>
                                    @Html.DropDownListFor(m => m.ConditionOnActivate, new SelectList(Model.Conditions, "ID", "Name", Model.ConditionOnActivate),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                </div>
                                
                                <div class="row">
                                    <label>On deactivate</label>
                                    @Html.DropDownListFor(m => m.ConditionOnDeactivate, new SelectList(Model.Conditions, "ID", "Name", Model.ConditionOnDeactivate),"--Non--", HtmlConfiguration.ListBoxFor_SelectSingle)
                                </div>
                            </div>
						</div>
					</div>
                </div>
            </div>
            <button class="btn btn-primary">Save</button>
            <a class="btn btn-primary" href="@Url.Action("Index", new { id = (Guid?)null })">New</a>
            @Html.ActionLink("Delete","Delete","SpecialAbility",new { id = Model != null && Model.SelectedItem != null ? Model.SelectedItem.ID : (Guid?)null},HtmlConfiguration.ActionLink_Button)
        </div>
    </div>
}